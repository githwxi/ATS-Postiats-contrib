;;;;;;
;;
;; The Clojure code is generated by atscc2clj
;; The starting compilation time is: 2016-12-25: 17h:42m
;;
;;;;;;
(declare _ats2cljpre_list_loop_3)
(declare _ats2cljpre_list_aux_7)
(declare _ats2cljpre_list_loop_10)
(declare ats2cljpre_list_vt_length)
(declare _ats2cljpre_list_loop_3)
(declare ats2cljpre_list_vt_snoc)
(declare ats2cljpre_list_vt_extend)
(declare ats2cljpre_list_vt_append)
(declare _ats2cljpre_list_aux_7)
(declare ats2cljpre_list_vt_reverse)
(declare ats2cljpre_list_vt_reverse_append)
(declare _ats2cljpre_list_loop_10)
;;;;;;


;;fun
(defn
 ats2cljpre_list_vt_length[arg0]
(
with-local-vars
[
;;knd = 0
  tmpret2 nil
;;var tmplab,tmplab_clj
] ;; with-local-vars
  ;; __patsflab_list_vt_length
  (_ats2cljpre_list_loop_3 arg0 0)
) ;; end-of-with-local-vars
) ;; end-of-fun


;;fun
(defn
 _ats2cljpre_list_loop_3[arg0 arg1]
(
with-local-vars
[
;;knd = 1
;;apy0 nil
;;apy1 nil
  tmpret3 nil
  tmp5 nil
  tmp6 nil
;;var funlab_clj
;;var tmplab,tmplab_clj
] ;; with-local-vars
  ;while(true){
   (loop [
     arg0 arg0
     arg1 arg1
    ] ; funlab_clj = 0;
    ;; __patsflab__ats2cljpre_list_loop_3
    (let[
      casefnx
      (fn casefnx[tmplab](case tmplab
        ;; ATSbranchseq_beg
        1 (do
         (if (ATSCKptriscons arg0)
           (casefnx 4)
           (do
            (casefnx 2)
           )
         )
        ) ;; end-of-branch
        2 (do
         arg1
        ) ;; end-of-branch
        ;; ATSbranchseq_end
        ;; ATSbranchseq_beg
        3 (do
         (casefnx 4)
        ) ;; end-of-branch
        4 (do
         (ATSINStmpset tmp5 (ATSSELcon arg0 1))
         (ATSINStmpset tmp6 (ats2cljpre_add_int1_int1 arg1 1))
         ;; apy0 = @tmp5
         ;; apy1 = @tmp6
         ;; arg0 = apy0
         ;; arg1 = apy1
         ;; funlab_clj = 1; // __patsflab__ats2cljpre_list_loop_3
         (_ats2cljpre_list_loop_3 @tmp5 @tmp6)
        ) ;; end-of-branch
        ;; ATSbranchseq_end
        ;; (else (atscc2clj_caseof_deadcode _FILE_ _LINE_))
       ) ;; end-of-case
      ) ;; end-of-casefnx
     ] (casefnx 1)
    ) ;; end-of-let(casefnx)
    ;; if (funlab_clj > 0) continue; else ;; return tmpret3;
  ) ;} // endwhile-fun
) ;; end-of-with-local-vars
) ;; end-of-fun


;;fun
(defn
 ats2cljpre_list_vt_snoc[arg0 arg1]
(
with-local-vars
[
;;knd = 0
  tmpret7 nil
  tmp8 nil
  tmp9 nil
;;var tmplab,tmplab_clj
] ;; with-local-vars
  ;; __patsflab_list_vt_snoc
  (ATSINStmpset tmp9 atscc2clj_null)
  (ATSINStmpset tmp8 (ATSPMVtysum arg1 @tmp9))
  (ats2cljpre_list_vt_append arg0 @tmp8)
) ;; end-of-with-local-vars
) ;; end-of-fun


;;fun
(defn
 ats2cljpre_list_vt_extend[arg0 arg1]
(
with-local-vars
[
;;knd = 0
  tmpret10 nil
  tmp11 nil
  tmp12 nil
;;var tmplab,tmplab_clj
] ;; with-local-vars
  ;; __patsflab_list_vt_extend
  (ATSINStmpset tmp12 atscc2clj_null)
  (ATSINStmpset tmp11 (ATSPMVtysum arg1 @tmp12))
  (ats2cljpre_list_vt_append arg0 @tmp11)
) ;; end-of-with-local-vars
) ;; end-of-fun


;;fun
(defn
 ats2cljpre_list_vt_append[arg0 arg1]
(
with-local-vars
[
;;knd = 0
  tmpret13 nil
;;var tmplab,tmplab_clj
] ;; with-local-vars
  ;; __patsflab_list_vt_append
  (_ats2cljpre_list_aux_7 arg0 arg1)
) ;; end-of-with-local-vars
) ;; end-of-fun


;;fun
(defn
 _ats2cljpre_list_aux_7[arg0 arg1]
(
with-local-vars
[
;;knd = 0
  tmpret14 nil
  tmp15 nil
  tmp16 nil
  tmp17 nil
;;var tmplab,tmplab_clj
] ;; with-local-vars
  ;; __patsflab__ats2cljpre_list_aux_7
  (let[
    casefnx
    (fn casefnx[tmplab](case tmplab
      ;; ATSbranchseq_beg
      1 (do
       (if (ATSCKptriscons arg0)
         (casefnx 4)
         (do
          (casefnx 2)
         )
       )
      ) ;; end-of-branch
      2 (do
       arg1
      ) ;; end-of-branch
      ;; ATSbranchseq_end
      ;; ATSbranchseq_beg
      3 (do
       (casefnx 4)
      ) ;; end-of-branch
      4 (do
       (ATSINStmpset tmp15 (ATSSELcon arg0 0))
       (ATSINStmpset tmp16 (ATSSELcon arg0 1))
       ;; ATSINSfreecon(arg0);
       (ATSINStmpset tmp17 (_ats2cljpre_list_aux_7 @tmp16 arg1))
       (ATSPMVtysum @tmp15 @tmp17)
      ) ;; end-of-branch
      ;; ATSbranchseq_end
      ;; (else (atscc2clj_caseof_deadcode _FILE_ _LINE_))
     ) ;; end-of-case
    ) ;; end-of-casefnx
   ] (casefnx 1)
  ) ;; end-of-let(casefnx)
) ;; end-of-with-local-vars
) ;; end-of-fun


;;fun
(defn
 ats2cljpre_list_vt_reverse[arg0]
(
with-local-vars
[
;;knd = 0
  tmpret18 nil
  tmp19 nil
;;var tmplab,tmplab_clj
] ;; with-local-vars
  ;; __patsflab_list_vt_reverse
  (ATSINStmpset tmp19 atscc2clj_null)
  (ats2cljpre_list_vt_reverse_append arg0 @tmp19)
) ;; end-of-with-local-vars
) ;; end-of-fun


;;fun
(defn
 ats2cljpre_list_vt_reverse_append[arg0 arg1]
(
with-local-vars
[
;;knd = 0
  tmpret20 nil
;;var tmplab,tmplab_clj
] ;; with-local-vars
  ;; __patsflab_list_vt_reverse_append
  (_ats2cljpre_list_loop_10 arg0 arg1)
) ;; end-of-with-local-vars
) ;; end-of-fun


;;fun
(defn
 _ats2cljpre_list_loop_10[arg0 arg1]
(
with-local-vars
[
;;knd = 1
;;apy0 nil
;;apy1 nil
  tmpret21 nil
  tmp22 nil
  tmp23 nil
  tmp24 nil
;;var funlab_clj
;;var tmplab,tmplab_clj
] ;; with-local-vars
  ;while(true){
   (loop [
     arg0 arg0
     arg1 arg1
    ] ; funlab_clj = 0;
    ;; __patsflab__ats2cljpre_list_loop_10
    (let[
      casefnx
      (fn casefnx[tmplab](case tmplab
        ;; ATSbranchseq_beg
        1 (do
         (if (ATSCKptriscons arg0)
           (casefnx 4)
           (do
            (casefnx 2)
           )
         )
        ) ;; end-of-branch
        2 (do
         arg1
        ) ;; end-of-branch
        ;; ATSbranchseq_end
        ;; ATSbranchseq_beg
        3 (do
         (casefnx 4)
        ) ;; end-of-branch
        4 (do
         (ATSINStmpset tmp22 (ATSSELcon arg0 0))
         (ATSINStmpset tmp23 (ATSSELcon arg0 1))
         ;; ATSINSfreecon(arg0);
         (ATSINStmpset tmp24 (ATSPMVtysum @tmp22 arg1))
         ;; apy0 = @tmp23
         ;; apy1 = @tmp24
         ;; arg0 = apy0
         ;; arg1 = apy1
         ;; funlab_clj = 1; // __patsflab__ats2cljpre_list_loop_10
         (_ats2cljpre_list_loop_10 @tmp23 @tmp24)
        ) ;; end-of-branch
        ;; ATSbranchseq_end
        ;; (else (atscc2clj_caseof_deadcode _FILE_ _LINE_))
       ) ;; end-of-case
      ) ;; end-of-casefnx
     ] (casefnx 1)
    ) ;; end-of-let(casefnx)
    ;; if (funlab_clj > 0) continue; else ;; return tmpret21;
  ) ;} // endwhile-fun
) ;; end-of-with-local-vars
) ;; end-of-fun

;;;;;;
;;
;; end-of-compilation-unit
;;
;;;;;;
